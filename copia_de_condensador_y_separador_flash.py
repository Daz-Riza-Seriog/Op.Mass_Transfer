# -*- coding: utf-8 -*-
"""Copia de Condensador y separador flash.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k2sj-gHJ2d-0oqDoJONRQPjQVoT2rweD
"""

import scipy.optimize as opt
import numpy as np
import matplotlib.pyplot as plt

# Simulación del sistema de proceso total para la masa y energia 

# parametros

#Datos iniciales de la corriente 7 fase gaseosa

n7=1476.0 # [Kmol/h] Corriente 7 salida del reactor
T7=120.4 # [°C] temperatura de la corriente 7

#Fracciones molares

yA0_7=0.27164
yB0_7=0.11393
yC0_7=0.19763
yD0_7=0.01075
yE0_7=0.17722
yF0_7=0.02159
yG0_7=0.12302
yH0_7=0.08423


#Datos iniciales de la corriente 17 

n8=1192.9 # el real es 1201.5 # [Kmol/h] corriente 8 es la recirculación hacia el reactor
n9=15.1 # [Kmol/h] corriente 9 es la purga
n17=n8+n9 # [Kmol/h] Corriente 17 salida del separador flash cabeza
T17=80.1 # [°C] temperatura de la corriente 17

#Fracciones molares

yA0_17=0.32958
yB0_17=0.13923
yC0_17=0.23978
yD0_17=0.01257
yE0_17=0.18579
yF0_17=0.02263
yG0_17=0.04844
yH0_17=0.02299

#Datos iniciales de la corriente 17 fase gaseosa

n10=259.5 # [Kmol/h] Corriemte 10 Salida del separador flash fondos
T10=80.1 # [°C] temperatura de la corriente 10

#Fracciones molares

xA0_10=1e-12
xB0_10=1e-12
xC0_10=1e-12
xD0_10=0.00222
xE0_10=0.13704
xF0_10=0.01669
xG0_10=0.47269
xH0_10=0.37136

#resto de parametros
Q_cond=-2140.6 # [kW] calor que se retira en el condensador
P_flash=2633.7 # [kPa] la presion de operación del separador flash
VL_flash=4.88 # [m3] el volumen del líquido en el tanque flash
VG_flash=0.5*VL_flash # [m3] el volumen del gas en el tanque flash
T_flash=80.1 # [°C] la temperatura de operación del separador flash
vpunto_cond=49.37 # [m3/h] flujo volumetrico de agua de enfriamento en el condesador

#constantes

R=8314.472 # Pa*m^3/Kmol*K

# Peso molecular de cada compuesto

PM_A =2.0 # [Kg/Kmol]
PM_B =25.4 # [Kg/Kmol]
PM_C =28.0 # [Kg/Kmol]
PM_D =32.0 # [Kg/Kmol]
PM_E =46.0 # [Kg/Kmol]
PM_F =48.0 # [Kg/Kmol]
PM_G =62.0 # [Kg/Kmol]
PM_H =76.0 # [Kg/Kmol]

# Densidad de cada compuesto D,E,F,G y H

rho_D=299 # Kg/m^3
rho_E=365 # Kg/m^3
rho_F=328 # Kg/m^3
rho_G=612 # Kg/m^3
rho_H=617 # Kg/m^3


# calor de vaporicación masica y molar de cada compuesto D,E,F,G y H

lamda_D=202 # [kJ/kg] el calor de vaporización del compuesto D
lamda_E=372 # [kJ/kg] el calor de vaporización del compuesto E
lamda_F=372 # [kJ/kg] el calor de vaporización del compuesto F
lamda_G=523 # [kJ/kg] el calor de vaporización del compuesto G
lamda_H=486 # [kJ/kg] el calor de vaporización del compuesto H

lam_mol_D=lamda_D*PM_D #[kJ/Kmol]
lam_mol_E=lamda_E*PM_E #[kJ/Kmol]
lam_mol_F=lamda_F*PM_F #[kJ/Kmol]
lam_mol_G=lamda_G*PM_G #[kJ/Kmol]
lam_mol_H=lamda_H*PM_H #[kJ/Kmol]

# capacidades calorificas de los compuestos 

# fase vapor

Cp_vA= 14.6 # [kJ/kg °C] 
Cp_vB= 2.04 # [kJ/kg °C]
Cp_vC= 1.05 # [kJ/kg °C]
Cp_vD= 1.85 # [kJ/kg °C]
Cp_vE= 1.85 # [kJ/kg °C]
Cp_vF= 2.02 # [kJ/kg °C]
Cp_vG= 0.712 # [kJ/kg °C]
Cp_vH= 0.628 # [kJ/kg °C]

# fase liquido

Cp_lD= 7.66 # [kJ/kg °C]
Cp_lE= 4.17 # [kJ/kg °C]
Cp_lF= 4.45 # [kJ/kg °C]
Cp_lG= 2.55 # [kJ/kg °C]
Cp_lH= 2.45 # [kJ/kg °C]

Cp_mix7=(yA0_7*Cp_vA)+(yB0_7*Cp_vB)+(yC0_7*Cp_vC)+(yD0_7*Cp_vD)+(yE0_7*Cp_vE)+(yF0_7*Cp_vF)+(yG0_7*Cp_vG)+(yH0_7*Cp_vH)

# Presion de vapor (Antoine)

ConstA_D=20.81
ConstA_E=21.24
ConstA_F=21.24
ConstA_G=21.32
ConstA_H=22.10

ConstB_D=-1444.0
ConstB_E=-2114.0
ConstB_F=-2144.0
ConstB_G=-2748.0
ConstB_H=-3318.0

ConstC_D=259
ConstC_E=266
ConstC_F=266
ConstC_G=233
ConstC_H=250

#ecuación de Antoine P=exp[A+(B/(T+C))] ; P[Pa] y T[°C]

P_D=np.exp(ConstA_D+ConstB_D/(T_flash+ConstC_D))
P_E=np.exp(ConstA_E+ConstB_E/(T_flash+ConstC_E))
P_F=np.exp(ConstA_F+ConstB_F/(T_flash+ConstC_F))
P_G=np.exp(ConstA_G+ConstB_G/(T_flash+ConstC_G))
P_H=np.exp(ConstA_H+ConstB_H/(T_flash+ConstC_H))

# Moles iniciales en el separador

# Fase Liquida son las moles totales de la corriente 10

nL0_D=(rho_D*VL_flash)/PM_D #kmol
nL0_E=(rho_E*VL_flash)/PM_E #kmol
nL0_F=(rho_F*VL_flash)/PM_F #kmol
nL0_G=(rho_G*VL_flash)/PM_G #kmol
nL0_H=(rho_H*VL_flash)/PM_H #kmol

NT_L0=nL0_D+nL0_E+nL0_F+nL0_G+nL0_H

# Fase Gaseosa y vapor son las moles totales de la corriente 17 (8)


nG0_A=(yA0_17*P_flash*1000*VG_flash)/(R*(T_flash+273.15)) # Kmol
nG0_B=(yB0_17*P_flash*1000*VG_flash)/(R*(T_flash+273.15)) # Kmol
nG0_C=(yC0_17*P_flash*1000*VG_flash)/(R*(T_flash+273.15)) # Kmol
nG0_D=(yD0_17*P_flash*1000*VG_flash)/(R*(T_flash+273.15)) # Kmol
nG0_E=(yE0_17*P_flash*1000*VG_flash)/(R*(T_flash+273.15)) # Kmol
nG0_F=(yF0_17*P_flash*1000*VG_flash)/(R*(T_flash+273.15)) # Kmol
nG0_G=(yG0_17*P_flash*1000*VG_flash)/(R*(T_flash+273.15)) # Kmol
nG0_H=(yH0_17*P_flash*1000*VG_flash)/(R*(T_flash+273.15)) # Kmol

#nG0_D=(P_D*VG_flash)/(R*(T_flash+273.15)) # Kmol
#nG0_E=(P_E*VG_flash)/(R*(T_flash+273.15)) # Kmol
#nG0_F=(P_F*VG_flash)/(R*(T_flash+273.15)) # Kmol
#nG0_G=(P_G*VG_flash)/(R*(T_flash+273.15)) # Kmol
#nG0_H=(P_H*VG_flash)/(R*(T_flash+273.15)) # Kmol
#nG0_d=(yA0_17*P_flash*1000*VG_flash)/(R*(T_flash+273.15))

NT_G0=nG0_A+nG0_B+nG0_C+nG0_D+nG0_E+nG0_F+nG0_G+nG0_H # Kmol

# flujo molar total dentro del separador flash

NT0_flash=NT_G0+NT_L0


# Define paso de solucion y tiempo
TiempoSimula = 1  # Tiempo de simulación [s].
PasoSimula = 0.001   # Paso de simulación en unidades de tiempo [s].
# Calcula el Número de pasos a simular
n = round(TiempoSimula/PasoSimula)

#corriente 10

#creación de los vectores 

# corriente 10

xA10=np.zeros(n+1) # se crea el vector que va contener los valores de x
xB10=np.zeros(n+1)
xC10=np.zeros(n+1)
xD10=np.zeros(n+1) 
xE10=np.zeros(n+1)
xF10=np.zeros(n+1)
xG10=np.zeros(n+1)
xH10=np.zeros(n+1)

#corriente 17 

yA17=np.zeros(n+1) # se crea el vector que va contener los valores de y
yB17=np.zeros(n+1)
yC17=np.zeros(n+1)
yD17=np.zeros(n+1)
yE17=np.zeros(n+1)
yF17=np.zeros(n+1)
yG17=np.zeros(n+1)
yH17=np.zeros(n+1)

t=np.zeros(n+1)

#condiciones iniciales para los compuestos y el tiempo

#corriente 10

t[0]=0
xA10[0]=xA0_10
xB10[0]=xB0_10
xC10[0]=xC0_10
xD10[0]=xD0_10
xE10[0]=xE0_10 
xF10[0]=xF0_10
xG10[0]=xG0_10
xH10[0]=xH0_10  
yD17[0]=yD0_17

#corriente 17

yA17[0]=yA0_17
yB17[0]=yB0_17
yC17[0]=yC0_17
yD17[0]=yD0_17
yE17[0]=yE0_17
yF17[0]=yF0_17
yG17[0]=yG0_17
yH17[0]=yH0_17

#inicio del ciclo for 

for i  in range(0,n):

  if t[i] > 5:
    n7_new=n7*1.5
  else:
    n7_new=n7  

# Componente A

  dx_dt=(yA0_7*(n7)-yA17[i]*(n17)-xA10[i]*n10)/NT_L0
  xA10[i+1]=xA10[i]+dx_dt*PasoSimula

  dy_dt=(yA0_7*(n7)-yA17[i]*(n17)-xA0_10*n10)/NT_G0
  yA17[i+1]=yA17[i]+dy_dt*PasoSimula

# Componente B

  dx_dt=(yB0_7*(n7)-yB17[i]*(n17)-xB0_10*n10)/NT_L0
  xB10[i+1]=xB10[i]+dx_dt*PasoSimula
   
  dy_dt=(yB0_7*(n7)-yB17[i]*(n17)-xC0_10*n10)/NT_G0
  yB17[i+1]=yB17[i]+dy_dt*PasoSimula  

# Componente C
   
  dx_dt=(yC0_7*(n7)-yC17[i]*(n17)-xC10[i]*n10)/NT_L0
  xC10[i+1]=xC10[i]+dx_dt*PasoSimula

  dy_dt=(yC0_7*(n7)-yC17[i]*(n17)-xC10[i]*n10)/NT_G0
  yC17[i+1]=yC17[i]+dy_dt*PasoSimula  

#componente D
 
  dx_dt=(yD0_7*(n7)-yD17[i]*(n17)-xD10[i]*n10)/NT_L0
  xD10[i+1]=xD10[i]+dx_dt*PasoSimula
  
  dy_dt=(yD0_7*(n7)-yD17[i]*(n17)-xD10[i]*n10)/NT_G0
  yD17[i+1]=yD17[i]+dy_dt*PasoSimula
  
# Componente E
 
  dx_dt=(yE0_7*(n7)-yE17[i]*(n17)-xE10[i]*n10)/NT_L0
  xE10[i+1]=xE10[i]+dx_dt*PasoSimula

  dy_dt=(yE0_7*(n7)-yE17[i]*(n17)-xE10[i]*n10)/NT_G0
  yE17[i+1]=yE17[i]+dy_dt*PasoSimula  
  
  
# Componente F

  dx_dt=(yF0_7*(n7)-yF17[i]*(n17)-xF10[i]*n10)/NT_L0
  xF10[i+1]=xF10[i]+dx_dt*PasoSimula
  
  dy_dt=(yF0_7*(n7)-yF17[i]*(n17)-xF10[i]*n10)/NT_G0
  yF17[i+1]=yF17[i]+dy_dt*PasoSimula
  

# Componente G
  
  dx_dt=(yG0_7*(n7)-yG17[i]*(n17)-xG10[i]*n10)/NT_L0
  xG10[i+1]=xG10[i]+dx_dt*PasoSimula
  
  dy_dt=(yG0_7*(n7)-yG17[i]*(n17)-xG10[i]*n10)/NT_G0
  yG17[i+1]=yG17[i]+dy_dt*PasoSimula

# Componente H

  dx_dt=(yH0_7*(n7)-yH17[i]*(n17)-xH10[i]*n10)/NT_L0
  xH10[i+1]=xH10[i]+dx_dt*PasoSimula

  dy_dt=(yH0_7*(n7)-yH17[i]*(n17)-xH10[i]*n10)/NT_G0
  yH17[i+1]=yH17[i]+dy_dt*PasoSimula
   
# realizar las graficas

  t[i+1]=(i+1)*PasoSimula

print(NT_L0)
plt.figure(1)
plt.title("Corriente 10\nFracción molar vs tiempo")
plt.plot(t,xA10, label=r"compuesto A" )
plt.plot(t,xB10, label=r"compuesto B" )
plt.plot(t,xC10, label=r"compuesto C" )
plt.plot(t,xD10, label=r"compuesto D" )
plt.plot(t,xE10, label=r"compuesto E" )
plt.plot(t,xF10, label=r"compuesto F" )
plt.plot(t,xG10, label=r"compuesto G" )
plt.plot(t,xH10, label=r"compuesto H" )
plt.xlabel('Tiempo $[h]$')
plt.ylabel('Fracción molar')
plt.legend()
plt.grid()
plt.show()

print(NT_G0)
plt.figure(2)
plt.title("Corriente 17\nFracción molar vs tiempo")
plt.plot(t,yA17, label=r"compuesto A" )
plt.plot(t,yB17, label=r"compuesto B" )
plt.plot(t,yC17, label=r"compuesto C" )
plt.plot(t,yD17, label=r"compuesto D" )
plt.plot(t,yE17, label=r"compuesto E" )
plt.plot(t,yF17, label=r"compuesto F" )
plt.plot(t,yG17, label=r"compuesto G" )
plt.plot(t,yH17, label=r"compuesto H" )
plt.xlabel('Tiempo $[h]$')
plt.ylabel('Fracción molar')
plt.legend()
plt.grid()
plt.show()

print(xG10[0:20])
plt.figure(1)
plt.title("Corriente 10\nFracción molar vs tiempo")
plt.plot(t,xG10, label=r"compuesto G" )
plt.xlabel('Tiempo $[h]$')
plt.ylabel('Fracción molar')
plt.legend()
plt.grid()
plt.show()

plt.figure(2)
plt.title("Corriente 17\nFracción molar vs tiempo")
plt.plot(t,yG17, label=r"compuesto G" )
plt.xlabel('Tiempo $[h]$')
plt.ylabel('Fracción molar')
plt.legend()
plt.grid()
plt.show()

# Corriente 17
# se crea los vectores que va contener los valores de x

yA17=np.zeros(n+1) 
yB17=np.zeros(n+1)
yC17=np.zeros(n+1)
yD17=np.zeros(n+1)
yE17=np.zeros(n+1)
yF17=np.zeros(n+1)
yG17=np.zeros(n+1)
yH17=np.zeros(n+1)
t=np.zeros(n+1)

#Condiciones iniciales

t[0]=0
yA17[0]=yA0_17
yB17[0]=yB0_17
yC17[0]=yC0_17
yD17[0]=yD0_17
yE17[0]=yE0_17
yF17[0]=yF0_17
yG17[0]=yG0_17
yH17[0]=yH0_17 

for i  in range(0,n):

  if t[i] > 4000:
    n7_new=n7*1
  else:
    n7_new=n7

# Componente A
 
  dy_dt=(yA0_7*(n7)-yA17[i]*(n17)-xA0_10*n10)/NT_G0
  yA17[i+1]=yA17[i]+dy_dt*PasoSimula
  
  

  t[i+1]=(i+1)*PasoSimula

# Componente B
   
  dy_dt=(yB0_7*(n7)-yB17[i]*(n17)-xB0_10*n10)/NT_G0
  
  yB17[i+1]=yB17[i]+dy_dt*PasoSimula
  
  t[i+1]=(i+1)*PasoSimula

# Componente C
   
  dy_dt=(yC0_7*(n7)-yC17[i]*(n17)-xC0_10*n10)/NT_G0
  
  yC17[i+1]=yC17[i]+dy_dt*PasoSimula
  
  t[i+1]=(i+1)*PasoSimula

# Componente D
   
  dy_dt=(yD0_7*(n7)-yD17[i]*(n17)-xD0_10*n10)/NT_G0
  
  yD17[i+1]=yD17[i]+dy_dt*PasoSimula
  
  t[i+1]=(i+1)*PasoSimula

# Componente E
   
  dy_dt=(yE0_7*(n7)-yE17[i]*(n17)-xE0_10*n10)/NT_G0
  
  yE17[i+1]=yE17[i]+dy_dt*PasoSimula
  
  t[i+1]=(i+1)*PasoSimula 

# Componente F
 
  dy_dt=(yF0_7*(n7)-yF17[i]*(n17)-xF0_10*n10)/NT_G0
  
  yF17[i+1]=yF17[i]+dy_dt*PasoSimula
  
  t[i+1]=(i+1)*PasoSimula

# Componente G
   
  dy_dt=(yG0_7*(n7)-yG17[i]*(n17)-xG0_10*n10)/NT_G0
  
  yG17[i+1]=yG17[i]+dy_dt*PasoSimula
  
  t[i+1]=(i+1)*PasoSimula

# Componente H
 
  dy_dt=(yH0_7*(n7)-yH17[i]*(n17)-xH0_10*n10)/NT_G0
  
  yH17[i+1]=yH17[i]+dy_dt*PasoSimula
  
  t[i+1]=(i+1)*PasoSimula  

# realizar las graficas

print(NT_G0)
plt.figure(1)
plt.title("Corriente 17\nFracción molar vs tiempo")
plt.plot(t,yA17, label=r"compuesto A" )
plt.plot(t,yB17, label=r"compuesto B" )
plt.plot(t,yC17, label=r"compuesto C" )
plt.plot(t,yD17, label=r"compuesto D" )
plt.plot(t,yE17, label=r"compuesto E" )
plt.plot(t,yF17, label=r"compuesto F" )
plt.plot(t,yG17, label=r"compuesto G" )
plt.plot(t,yH17, label=r"compuesto H" )
plt.xlabel('Tiempo $[h]$')
plt.ylabel('Fracción molar')
plt.legend()
plt.grid()
plt.show()

#componente D
  
yA17=np.zeros(n+1) # se crea el vector que va contener los valores de x
t=np.zeros(n+1)
NT_G=np.zeros(n+1)
#condiciones iniciales del metodo
NT_G[0]=NT_G0
t[0]=0
yA17[0]=yA0_17 

for i  in range(0,n):

  if t[i] > 4000:
    n7_new=n7*1.5
  else:
    n7_new=n7  
 
  dy_dt=(yA0_7*(n7)-yA17[i]*(n17)-xA0_10*n10)/NT_G[i]
  
  yA17[i+1]=yA17[i]+dy_dt*PasoSimula
  NT_G[i+1]=(yA17[i+1]*P_flash*1000*VG_flash)/(R*(T_flash+273.15))+nG0_B+nG0_C+nG0_D+nG0_E+nG0_F+nG0_G+nG0_H
  t[i+1]=(i+1)*PasoSimula

print(yC0_17+yD0_17+yE0_17+yF0_17+yG0_17+yH0_17)
print(NT_L0)
print(NT_G[0],NT_G[1],NT_G[2],NT_G[3],NT_G[4])
print(yA17[0],yA17[1],yA17[2],yA17[3],yA17[4])
plt.figure(1)
plt.title("Corriente 10\nFracción molar vs tiempo")
plt.plot(t,yA17, label=r"compuesto D" )
plt.xlabel('Tiempo $[h]$')
plt.ylabel('Fracción molar')
plt.legend()
plt.grid()
plt.show()

plt.figure(2)
plt.title("Corriente 10\nmoles totales vs tiempo")
plt.plot(t,NT_G, label=r"compuesto D" )
plt.xlabel('Tiempo $[h]$')
plt.ylabel('Moles totales ')
plt.legend()
plt.grid()
plt.show()